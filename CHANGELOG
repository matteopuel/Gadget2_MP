### Solve some warnings ###
"allocate.c": line 119, substitute "printf("\nAllocated %g MByte for particle storage. %lu\n\n", bytes_tot / (1024.0 * 1024.0), sizeof(struct particle_data));"
"allocate.c": line 129, substitute "printf("failed to allocate memory for `SphP' (%g MB) %lu.\n", bytes / (1024.0 * 1024.0), sizeof(struct sph_particle_data));"
"allocate.c": line 136, substitute "printf("Allocated %g MByte for storage of SPH data. %lu\n\n", bytes_tot / (1024.0 * 1024.0), sizeof(struct sph_particle_data));"

"forcetree.c": line 2668, substitute printf("\nAllocated %g MByte for BH-tree. %lu\n\n", allbytes / (1024.0 * 1024.0), sizeof(struct NODE) + sizeof(struct extNODE));"
"gravtree.c": line 32, substitute "int *numnodeslist, maxnumnodes, nexport, *numlist, *nrecv;"
"gravtree.c": line 40, substitute "int *noffset, *nbuffer, *nsend, *nsend_local, *ndonelist;"


### Changes to include DM Oscillations, Annihilations and Scatterings ###

write README.md and README.txt from scratch with description of implementations of our model in the code

"Makefile": line 51, add "OPT   +=  -DADM_MODEL_ON # scalar mediator interaction as the default model"
"Makefile": line 52, add "OPT   +=  -DVECTOR_MEDIATOR"
"Makefile": line 53, add "OPT   +=  -DSCALAR_MEDIATOR"
"Makefile": line 54, add "OPT   +=  -DOSCILLATION_DM"
"Makefile": line 55, add "OPT   +=  -DANNIHILATION_DM"
"Makefile": line 56, add "OPT   +=  -DSCATTERING_DM"
"Makefile": line 57, add "OPT   +=  -DTRANSFER_CROSS_SECTION"
"Makefile": line 58, add "OPT   +=  -DMODIFIED_TRANSFER_CROSS_SECTION"
"Makefile": line 59, add "OPT   +=  -DVELOCITY_ANGULAR_DEPENDENT_CROSS_SECTION"
"Makefile": line 60, add "OPT   +=  -DLATE_TIME_PHASE_CHANGE"
"Makefile": line 61, add "OPT   +=  -DOUTPUTDT_SCATTER"
"Makefile": line 62, add "OPT   +=  -DTEST_UNIFORM_BKG # test 1"
"Makefile": line 63, add "OPT   +=  -DTEST_HERNQUIST_HALO_SCATT # test 2 (scattering)"
"Makefile": line 64, add "OPT   +=  -DTEST_HERNQUIST_HALO_ANN # test 2 (annihilation)"
"Makefile": line 273, add "ifeq (ADM_MODEL_ON,$(findstring ADM_MODEL_ON, $(OPT)))"
"Makefile": line 274, add "OBJS += adm_model.o"
"Makefile": line 275, add "endif"

"ADMmodel.param": line 133, add "% Vector or Scalar mediator model"
"ADMmodel.param": line 134, add "MediatorDMmassratio		0.3		% w = m_V / m_DM"
"ADMmodel.param": line 135, add "VectorOrScalarCoupling			0.02	% alpha_D"
"ADMmodel.param": line 137, add "% Oscillation"
"ADMmodel.param": line 138, add "MajoranaMass		1.0e-31		% delta_m in eV/c^2"
"ADMmodel.param": line 140, add "% Annihilation"
"ADMmodel.param": line 141, add "AnnihilationCrossSectionSwave			1.00		% cm^3/g/sec"
"ADMmodel.param": line 142, add "AnnihilateSearchRadius  			0.0003 		% 0.01562496"
"ADMmodel.param": line 143, add "AnnihilateSearchRadiusMaxPhys 		0.00008 	% 0.004"
"ADMmodel.param": line 145, add "% Scattering"
"ADMmodel.param": line 146, add "ScatteringCrossSection			1.00		% cm^2/g"
"ADMmodel.param": line 147, add "ScatterSearchRadius  			0.0003 		% 0.01562496"
"ADMmodel.param": line 148, add "ScatterSearchRadiusMaxPhys 		0.00008 	% 0.004"
"ADMmodel.param": line 150, add "ThetaTableFilename  /.../theta_tables_2D/yukawa_w1_th.txt"
"ADMmodel.param": line 151, add "CrossSectionTableFilename /.../theta_tables_2D/yukawa_w1_cs.txt"
"ADMmodel.param": line 152, add "Nv 		1000"
"ADMmodel.param": line 153, add "Ntheta 		1000"
"ADMmodel.param": line 154, add "vmin 	0.560 % to get w=560 km/s, with w=1 in CrossSection and Theta files"
"ADMmodel.param": line 155, add "vmax 	560000"
"ADMmodel.param": line 157, add "ProbabilityTol    0.2 	% 0.2 (Rocha), to avoid multiple scattering in each timestep (in principle it should be at most 1.0)"

"peano.c": from line 211 to line 260, add "const unsigned char rottable3[48][8] = {
{36, 28, 25, 27, 10, 10, 25, 27},
{29, 11, 24, 24, 37, 11, 26, 26},
{8, 8, 25, 27, 30, 38, 25, 27},
{9, 39, 24, 24, 9, 31, 26, 26},
{40, 24, 44, 32, 40, 6, 44, 6},
{25, 7, 33, 7, 41, 41, 45, 45},
{4, 42, 4, 46, 26, 42, 34, 46},
{43, 43, 47, 47, 5, 27, 5, 35},
{33, 35, 36, 28, 33, 35, 2, 2},
{32, 32, 29, 3, 34, 34, 37, 3},
{33, 35, 0, 0, 33, 35, 30, 38},
{32, 32, 1, 39, 34, 34, 1, 31},
{24, 42, 32, 46, 14, 42, 14, 46},
{43, 43, 47, 47, 25, 15, 33, 15},
{40, 12, 44, 12, 40, 26, 44, 34},
{13, 27, 13, 35, 41, 41, 45, 45},
{28, 41, 28, 22, 38, 43, 38, 22},
{42, 40, 23, 23, 29, 39, 29, 39},
{41, 36, 20, 36, 43, 30, 20, 30},
{37, 31, 37, 31, 42, 40, 21, 21},
{28, 18, 28, 45, 38, 18, 38, 47},
{19, 19, 46, 44, 29, 39, 29, 39},
{16, 36, 45, 36, 16, 30, 47, 30},
{37, 31, 37, 31, 17, 17, 46, 44},
{12, 4, 1, 3, 34, 34, 1, 3},
{5, 35, 0, 0, 13, 35, 2, 2},
{32, 32, 1, 3, 6, 14, 1, 3},
{33, 15, 0, 0, 33, 7, 2, 2},
{16, 0, 20, 8, 16, 30, 20, 30},
{1, 31, 9, 31, 17, 17, 21, 21},
{28, 18, 28, 22, 2, 18, 10, 22},
{19, 19, 23, 23, 29, 3, 29, 11},
{9, 11, 12, 4, 9, 11, 26, 26},
{8, 8, 5, 27, 10, 10, 13, 27},
{9, 11, 24, 24, 9, 11, 6, 14},
{8, 8, 25, 15, 10, 10, 25, 7},
{0, 18, 8, 22, 38, 18, 38, 22},
{19, 19, 23, 23, 1, 39, 9, 39},
{16, 36, 20, 36, 16, 2, 20, 10},
{37, 3, 37, 11, 17, 17, 21, 21},
{4, 17, 4, 46, 14, 19, 14, 46},
{18, 16, 47, 47, 5, 15, 5, 15},
{17, 12, 44, 12, 19, 6, 44, 6},
{13, 7, 13, 7, 18, 16, 45, 45},
{4, 42, 4, 21, 14, 42, 14, 23},
{43, 43, 22, 20, 5, 15, 5, 15},
{40, 12, 21, 12, 40, 6, 23, 6},
{13, 7, 13, 7, 41, 41, 22, 20}
};"
"peano.c": from line 262 to line 311, add "const unsigned char subpix3[48][8] = {
{0, 7, 1, 6, 3, 4, 2, 5},
{7, 4, 6, 5, 0, 3, 1, 2},
{4, 3, 5, 2, 7, 0, 6, 1},
{3, 0, 2, 1, 4, 7, 5, 6},
{1, 0, 6, 7, 2, 3, 5, 4},
{0, 3, 7, 4, 1, 2, 6, 5},
{3, 2, 4, 5, 0, 1, 7, 6},
{2, 1, 5, 6, 3, 0, 4, 7},
{6, 1, 7, 0, 5, 2, 4, 3},
{1, 2, 0, 3, 6, 5, 7, 4},
{2, 5, 3, 4, 1, 6, 0, 7},
{5, 6, 4, 7, 2, 1, 3, 0},
{7, 6, 0, 1, 4, 5, 3, 2},
{6, 5, 1, 2, 7, 4, 0, 3},
{5, 4, 2, 3, 6, 7, 1, 0},
{4, 7, 3, 0, 5, 6, 2, 1},
{6, 7, 5, 4, 1, 0, 2, 3},
{7, 0, 4, 3, 6, 1, 5, 2},
{0, 1, 3, 2, 7, 6, 4, 5},
{1, 6, 2, 5, 0, 7, 3, 4},
{2, 3, 1, 0, 5, 4, 6, 7},
{3, 4, 0, 7, 2, 5, 1, 6},
{4, 5, 7, 6, 3, 2, 0, 1},
{5, 2, 6, 1, 4, 3, 7, 0},
{7, 0, 6, 1, 4, 3, 5, 2},
{0, 3, 1, 2, 7, 4, 6, 5},
{3, 4, 2, 5, 0, 7, 1, 6},
{4, 7, 5, 6, 3, 0, 2, 1},
{6, 7, 1, 0, 5, 4, 2, 3},
{7, 4, 0, 3, 6, 5, 1, 2},
{4, 5, 3, 2, 7, 6, 0, 1},
{5, 6, 2, 1, 4, 7, 3, 0},
{1, 6, 0, 7, 2, 5, 3, 4},
{6, 5, 7, 4, 1, 2, 0, 3},
{5, 2, 4, 3, 6, 1, 7, 0},
{2, 1, 3, 0, 5, 6, 4, 7},
{0, 1, 7, 6, 3, 2, 4, 5},
{1, 2, 6, 5, 0, 3, 7, 4},
{2, 3, 5, 4, 1, 0, 6, 7},
{3, 0, 4, 7, 2, 1, 5, 6},
{1, 0, 2, 3, 6, 7, 5, 4},
{0, 7, 3, 4, 1, 6, 2, 5},
{7, 6, 4, 5, 0, 1, 3, 2},
{6, 1, 5, 2, 7, 0, 4, 3},
{5, 4, 6, 7, 2, 3, 1, 0},
{4, 3, 7, 0, 5, 2, 6, 1},
{3, 2, 0, 1, 4, 5, 7, 6},
{2, 5, 1, 6, 3, 4, 0, 7}
};"
"peano.c": line 316, add "peanokey peano_hilbert_key(int x, int y, int z, int bits)"
"peano.c": line 316, add "{"
"peano.c": line 316, add "int mask;"
"peano.c": line 316, add "unsigned char rotation = 0;"
"peano.c": line 316, add "peanokey key = 0;"
"peano.c": line 316, add "for(mask = 1 << (bits - 1); mask > 0; mask >>= 1)"
"peano.c": line 316, add "{"
"peano.c": line 316, add "unsigned char pix = ((x & mask) ? 4 : 0) | ((y & mask) ? 2 : 0) | ((z & mask) ? 1 : 0);"
"peano.c": line 316, add "key <<= 3;"
"peano.c": line 316, add "key |= subpix3[rotation][pix];"
"peano.c": line 316, add "rotation = rottable3[rotation][pix];"
"peano.c": line 316, add "}"
"peano.c": line 316, add "return key;"
"peano.c": line 316, add "}"

"allvars.h": line 21, add "#include <gsl/gsl_math.h> // MPUEL: add <gsl/gsl_math.h> library for M_PI"
"allvars.h": line 79, add "#define  EV                1.602176634e-12"
"allvars.h": line 80, add "#ifdef ADM_MODEL_ON"
"allvars.h": line 81, add "#define  ADM_type          1 /* Particle Type that can oscillate, scatter and annihilate, i.e. Halo particles! */
"allvars.h": line 82, add "#define  annihilated_type  5 /* Particle Type of particles that have annihiliated */"
"allvars.h": line 83, add "#endif // end of ADM_MODEL_ON"
"allvars.h": line 109, add "#ifdef VELOCITY_ANGULAR_DEPENDENT_CROSS_SECTION"
"allvars.h": line 110, add "#define MAXLEN_THETA_TABLE 1000000 /*!< maxmimum number of thetas in 2D theta table */"
"allvars.h": line 111, add "#define MAXLEN_CROSSSECTION_TABLE 10000 /*!< maxmimum number of cross-sections in cross-section table */"
"allvars.h": line 112, add "#endif"
"allvars.h": line 157, add "#ifdef ADM_MODEL_ON"
"allvars.h": line 158, add "#define COSMIC_TIME_TABLE_LENGTH  100000   /*!< length of the lookup table used to hold the cosmic time */"
"allvars.h": line 160, add "#if defined(ANNIHILATION_DM) || defined(SCATTERING_DM)"
"allvars.h": line 161, add "extern int NumADMUpdate;        /*!< number of active ADM particles on local processor in current timestep  */"
"allvars.h": line 162, add "#endif"
"allvars.h": line 164, add "#endif"
"allvars.h": line 186, add "#ifdef ADM_MODEL_ON"
"allvars.h": line 187, add "extern gsl_rng *random_generator_ADM; /*!< random number generator for ADM calculations*/"
"allvars.h": line 188, add "#endif"
"allvars.h": line 266, add "#ifdef ADM_MODEL_ON"
"allvars.h": line 267, add "extern FILE *FdAdmModel;"
"allvars.h": line 268, add "extern double CosmicTimeTable[COSMIC_TIME_TABLE_LENGTH];  /*!< table for cosmic time */"
"allvars.h": line 269, add "#endif"
"allvars.h": line 310, add "#ifdef ADM_MODEL_ON"
"allvars.h": line 311, add "#if defined(ANNIHILATION_DM) || defined(SCATTERING_DM)"
"allvars.h": line 312, add "int BunchSizeADM;         /*!< number of particles fitting into the communication buffer in the annihilation/scattering computation */"
"allvars.h": line 313, add "#endif"
"allvars.h": line 314, add "#endif"
"allvars.h": line 397, add "double PreviousTime; /*!< previous time of the simulation */"
"allvars.h": line 530, add "#ifdef ADM_MODEL_ON"
"allvars.h": line 531, add "double c; /*!< speed of light in code units */"
"allvars.h": line 532, add "#endif"
"allvars.h": line 534, add "#if defined(VECTOR_MEDIATOR) || defined(SCALAR_MEDIATOR)"
"allvars.h": line 535, add "double MediatorDMmassratio; /*!< Mass ratio between mediator and DM */"
"allvars.h": line 536, add "double VectorOrScalarCoupling;  /*!< Coupling between vector or scalar mediator and DM */"
"allvars.h": line 537, add "#endif"
"allvars.h": line 539, add "#ifdef OSCILLATION_DM"
"allvars.h": line 540, add "double MajoranaMass;  /*!< Majorana mass term in units of eV */
"allvars.h": line 541, add "double delta_m; /*!< Majorana mass term in code units */"
"allvars.h": line 542, add "#endif"
"allvars.h": line 544, add "#ifdef ANNIHILATION_DM"
"allvars.h": line 545, add "unsigned long N_annihilations; /*!< Number of DM annihilations computed at this Task */
"allvars.h": line 546, add "unsigned long N_annihilations_in_timestep;  /*!< Sum N_annihiltions over all Tasks in each timestep. Only the root Task keeps track of this value */"
"allvars.h": line 547, add "unsigned long N_annihilations_tot;  /*!< Sum N_annihiltions over all Tasks in simulation. Only the root Task keeps track of this value */"
"allvars.h": line 548, add "double AnnihilationCrossSectionSwave; /*!< Cross-section in units of cm^3/g/sec */"
"allvars.h": line 549, add "double sigmav_s;  /*!< Cross-section in code units */"
"allvars.h": line 550, add "double AnnihilateSearchRadius;  /*!< Comoving annihilate search radius */"
"allvars.h": line 551, add "double AnnihilateSearchRadiusMaxPhys; /*!< Maximum Physical annihilate search radius */"
"allvars.h": line 552, add "#endif"
"allvars.h": line 554, add "#ifdef SCATTERING_DM"
"allvars.h": line 555, add "unsigned long N_scatterings; /*!< Number of DM scatterings computed at this Task */
"allvars.h": line 556, add "unsigned long N_scatterings_in_timestep;  /*!< Sum N_scatterings over all Tasks in each timestep. Only the root Task keeps track of this value */"
"allvars.h": line 557, add "unsigned long N_scatterings_tot;  /*!< Sum N_scatterings over all Tasks. Only the root Task keeps track of this value */
"allvars.h": line 558, add "double ScatteringCrossSection;  /*!< Cross-section in units of cm^2/g */"
"allvars.h": line 559, add "double sigma_scatter; /*!< Cross-section in code units */"
"allvars.h": line 560, add "double ScatterSearchRadius; /*!< Comoving scatter search radius */"
"allvars.h": line 561, add "double ScatterSearchRadiusMaxPhys;  /*!< Maximum Physical scatter search radius */"
"allvars.h": line 562, add "double ProbabilityTol;  /*!< Max prbability for SIDM timestep delimiter */"
"allvars.h": line 564, add "#endif"
"allvars.h": line 566, add "#ifdef VELOCITY_ANGULAR_DEPENDENT_CROSS_SECTION"
"allvars.h": line 567, add "char ThetaTableFilename[200];"
"allvars.h": line 568, add "double ThetaTable[MAXLEN_THETA_TABLE];"
"allvars.h": line 569, add "char ThetaTableFlag[MAXLEN_THETA_TABLE];"
"allvars.h": line 570, add "int ThetaTableLength;"
"allvars.h": line 571, add "int Nv; /*!< number of velocities for which theta table is calculated */"
"allvars.h": line 572, add "int Ntheta; /*!< number of thetas in theta table for each velocity */"
"allvars.h": line 573, add "double vmin; /*!< minimum velocity for which theta table is calculated */"
"allvars.h": line 574, add "double vmax; /*!< maximum velocity for which theta table is calculated */"
"allvars.h": line 575, add "char CrossSectionTableFilename[200];"
"allvars.h": line 576, add "double CrossSectionTable[MAXLEN_CROSSSECTION_TABLE];"
"allvars.h": line 577, add "char CrossSectionTableFlag[MAXLEN_CROSSSECTION_TABLE];"
"allvars.h": line 578, add "int CrossSectionTableLength;"
"allvars.h": line 579, add "#endif"
"allvars.h": line 626, add "#ifdef OSCILLATION_DM"
"allvars.h": line 627, add "double OscillationAngle;   /*!< Oscillation angle associated to each DM particle */"
"allvars.h": line 628, add "#endif"
"allvars.h": line 630, add "#ifdef ANNIHILATION_DM"
"allvars.h": line 631, add "short int AnnihilateFlag;   /*!< particle flag for particles that have annihilated during the timestep */"
"allvars.h": line 632, add "#endif"
"allvars.h": line 634, add "#ifdef SCATTERING_DM"
"allvars.h": line 635, add "double dt_scatter;    /*!< timestep for single particle (see KODA's code dt_sidm);"
"allvars.h": line 636, add "just for scattering because in annihilation particles disappear */"
"allvars.h": line 637, add "short int ScatterFlag;   /*!< particle flag for particles that have scattered during the timestep */"
"allvars.h": line 638, add "#endif"
"allvars.h": line 755, modify "#ifdef ADM_MODEL_ON"
"allvars.h": line 756, modify "#define IO_NBLOCKS 13"
"allvars.h": line 757, modify "#else"
"allvars.h": line 761, modify "#endif"
"allvars.h": line 778, add "// MPUEL: add three new blocks in the snapshot (their presence is controlled by blockpresent() in io.c)"
"allvars.h": line 779, add "#ifdef ADM_MODEL_ON"
"allvars.h": line 780, add "IO_ANGOSC,"
"allvars.h": line 781, add "IO_DTSCAT,"
"allvars.h": line 782, add "#endif"
"allvars.h": line 907, add "#ifdef ADM_MODEL_ON"
"allvars.h": line 908, add "#if defined(ANNIHILATION_DM) || defined(SCATTERING_DM)"
"allvars.h": line 910, add "extern struct admdata_in"
"allvars.h": line 911, add "{"
"allvars.h": line 912, add "FLOAT Pos[3];"
"allvars.h": line 913, add "FLOAT Vel[3];"
"allvars.h": line 914, add "int Index;"
"allvars.h": line 915, add "int Task;"
"allvars.h": line 916, add "int Ti_begstep;               /*!< marks start of particle timestep on integer timeline */ "
"allvars.h": line 917, add "int Ti_endstep;               /*!< marks end of particle timestep on integer timeline */ "
"allvars.h": line 918, add "int Core2;"
"allvars.h": line 920, add "#ifdef OSCILLATION_DM"
"allvars.h": line 921, add "double OscillationAngle;   /*!< oscillation angle associated to each DM particle */"
"allvars.h": line 922, add "#endif"
"allvars.h": line 923, add "#ifdef ANNIHILATION_DM"
"allvars.h": line 924, add "short int AnnihilateFlag;   /*!< particle flag for particles that have annihilated during the timestep */"
"allvars.h": line 925, add "#endif"
"allvars.h": line 926, add "#ifdef SCATTERING_DM"
"allvars.h": line 927, add "double dt_scatter;"
"allvars.h": line 928, add "short int ScatterFlag;   /*!< particle flag for particles that have scattered during the timestep */"
"allvars.h": line 929, add "#endif"
"allvars.h": line 930, add "}"
"allvars.h": line 931, add "*ADMDataIn,                   /*!< holds particle data for DM annihilation/scattering to be exported to other processors */"
"allvars.h": line 932, add "*ADMDataGet;                  /*!< holds imported particle data for DM annihilation/scattering */"
"allvars.h": line 935, add "extern struct admdata_out"
"allvars.h": line 936, add "{"
"allvars.h": line 937, add "FLOAT DeltaVel[3];"
"allvars.h": line 939, add "#ifdef OSCILLATION_DM // "Delta" means difference: new minus old values (for safety)"
"allvars.h": line 940, add "double DeltaOscillationAngle;   /*!< oscillation angle associated to each DM particle */"
"allvars.h": line 941, add "#endif"
"allvars.h": line 942, add "#ifdef ANNIHILATION_DM // "Delta" means difference: new minus old values (for safety)" 
"allvars.h": line 943, add "short int DeltaAnnihilateFlag;   /*!< particle flag for particles that have annihilated during the timestep */"
"allvars.h": line 944, add "#endif"
"allvars.h": line 945, add "#ifdef SCATTERING_DM"
"allvars.h": line 946, add "double Deltadt_scatter;"
"allvars.h": line 947, add "short int DeltaScatterFlag;   /*!< particle flag for particles that have scattered during the timestep */"
"allvars.h": line 948, add "#endif"
"allvars.h": line 949, add "}"
"allvars.h": line 950, add "*ADMDataResult,               /*!< stores the locally computed DM annihilation/scattering results for imported particles */"
"allvars.h": line 951, add "*ADMDataPartialResult;        /*!< imported partial DM annihilation/scattering results from other processors */"
"allvars.h": line 953, add "#endif // end ANNIHILATION_DM and SCATTERING_DM"
"allvars.h": line 954, add "#endif // end ADM_MODEL_ON"

"allvars.c": line 24, add "#ifdef ADM_MODEL_ON"
"allvars.c": line 25, add "#if defined(ANNIHILATION_DM) || defined(SCATTERING_DM)"
"allvars.c": line 26, add "int NumADMUpdate;        /*!< number of active ADM particles on local processor in current timestep  */"
"allvars.c": line 27, add "#endif"
"allvars.c": line 28, add "#endif"
"allvars.c": line 49, add "#ifdef ADM_MODEL_ON"
"allvars.c": line 50, add "gsl_rng *random_generator_ADM; /*!< random number generator for ADM calculations*/"
"allvars.c": line 51, add "#endif"
"allvars.c": line 108, add "#ifdef ADM_MODEL_ON"
"allvars.c": line 109, add "FILE *FdAdmModel;"
"allvars.c": line 110, add "#endif"
"allvars.c": line 118, add "#ifdef ADM_MODEL_ON"
"allvars.c": line 119, add "double CosmicTimeTable[COSMIC_TIME_TABLE_LENGTH];  /*!< table for cosmic time */"
"allvars.c": line 120, add "#endif"
"allvars.c": line 232, add "#ifdef ADM_MODEL_ON
"allvars.c": line 233, add "#if defined(ANNIHILATION_DM) || defined(SCATTERING_DM)"
"allvars.c": line 235, add "struct admdata_in"
"allvars.c": line 236, add "*ADMDataIn,                   /*!< holds particle data for DM annihilation/scattering to be exported to other processors */"
"allvars.c": line 237, add "*ADMDataGet;                  /*!< holds imported particle data for DM annihilation/scattering */"
"allvars.c": line 239, add "struct admdata_out"
"allvars.c": line 240, add "*ADMDataResult,               /*!< stores the locally computed DM annihilation/scattering results for imported particles */"
"allvars.c": line 241, add "*ADMDataPartialResult;        /*!< imported partial DM annihilation/scattering results from other processors */"
"allvars.c": line 243, add "#endif"
"allvars.c": line 244, add "#endif"

"allocate.c": line 76, add "#ifdef ADM_MODEL_ON"
"allocate.c": line 77, add "#if defined(ANNIHILATION_DM) || defined(SCATTERING_DM)"
"allocate.c": line 79, add "All.BunchSizeADM ="
"allocate.c": line 80, add "(All.BufferSize * 1024 * 1024) / (2 * sizeof(struct admdata_in) + 2 * sizeof(struct admdata_out));"
"allocate.c": line 82, add "ADMDataIn = (struct admdata_in *) CommBuffer;"
"allocate.c": line 83, add "ADMDataGet = ADMDataIn + All.BunchSizeADM;"
"allocate.c": line 84, add "ADMDataResult = (struct admdata_out *) (ADMDataGet + All.BunchSizeADM);"
"allocate.c": line 85, add "ADMDataPartialResult = ADMDataResult + All.BunchSizeADM;"
"allocate.c": line 87, add "#endif"
"allocate.c": line 88, add "#endif"
"allocate.c": line 112, add "#ifdef ADM_MODEL_ON"
"allocate.c": line 113, add "#if defined(ANNIHILATION_DM) || defined(SCATTERING_DM)"
"allocate.c": line 114, add "printf("Communication buffer has room for %d particles in annihilation/scattering\n", All.BunchSizeADM);"
"allocate.c": line 115, add "#endif"
"allocate.c": line 116, add "#endif"

"begrun.c": line 55, add "#ifdef ADM_MODEL_ON"
"begrun.c": line 56, add "random_generator_ADM = gsl_rng_alloc(gsl_rng_ranlxd1);"
"begrun.c": line 57, add "gsl_rng_set(random_generator_ADM, ThisTask+1);  /* start-up seed from MPI rank"
"begrun.c": line 58, add "+ 1 in order to avoid collisions with the default settings."
"begrun.c": line 59, add "This means that any processor will have different generator seed */"
"begrun.c": line 60, add "#endif"
"begrun.c": line 96, add "#ifdef ADM_MODEL_ON"
"begrun.c": line 97, add "#if defined(ANNIHILATION_DM) || defined(SCATTERING_DM)"
"begrun.c": line 98, add "All.BunchSizeADM = all.BunchSizeADM;"
"begrun.c": line 99, add "#endif"
"begrun.c": line 100, add "#endif"
"begrun.c": line 142, add "#ifdef VELOCITY_ANGULAR_DEPENDENT_CROSS_SECTION"
"begrun.c": line 143, add "strcpy(All.ThetaTableFilename, all.ThetaTableFilename);"
"begrun.c": line 144, add "strcpy(All.CrossSectionTableFilename, all.CrossSectionTableFilename);"
"begrun.c": line 145, add "All.Nv = all.Nv;"
"begrun.c": line 146, add "All.Ntheta = all.Ntheta;"
"begrun.c": line 147, add "All.vmin = all.vmin;"
"begrun.c": line 148, add "All.vmax = all.vmax;"
"begrun.c": line 149, add "#endif"
"begrun.c": line 161, add "init_drift_table(); // here, we build also the CosmicTimeTable[]"
"begrun.c": line 201, add "#ifdef ADM_MODEL_ON"
"begrun.c": line 202, add "All.c = C / All.UnitVelocity_in_cm_per_s;"
"begrun.c": line 203, add "#endif"
"begrun.c": line 205, add "#ifdef OSCILLATION_DM"
"begrun.c": line 206, add "//All.delta_m = All.MajoranaMass * pow(C, 2) * EV / All.UnitEnergy_in_cgs; // [energy in code units] // wrong!"
"begrun.c": line 207, add "All.delta_m = (All.MajoranaMass * EV) * (2.0 * M_PI / PLANCK) * All.UnitTime_in_s; // [1/time in code units]"
"begrun.c": line 208, add "#endif"
"begrun.c": line 210, add "#ifdef ANNIHILATION_DM"
"begrun.c": line 211, add "All.sigmav_s = All.AnnihilationCrossSectionSwave * All.UnitMass_in_g  * All.UnitMass_in_g / pow(All.UnitLength_in_cm, 2) * 1.0e5 / All.UnitVelocity_in_cm_per_s; // 1.0e5 because 1 km = 10^5 cm"
"begrun.c": line 212, add "#endif"
"begrun.c": line 214, add "#ifdef SCATTERING_DM"
"begrun.c": line 215, add "All.sigma_scatter = All.ScatteringCrossSection * All.UnitMass_in_g / pow(All.UnitLength_in_cm, 2);"
"begrun.c": line 216, add "#endif"
"begrun.c": line 232, add "#ifdef ADM_MODEL_ON"
"begrun.c": line 233, add "printf("C (internal units) = %g\n", All.c);"
"begrun.c": line 235, add "#ifdef OSCILLATION_DM"
"begrun.c": line 236, add "printf("MajoranaMass (internal units) = %g\n", All.delta_m);"
"begrun.c": line 237, add "#endif"
"begrun.c": line 239, add "#ifdef ANNIHILATION_DM"
"begrun.c": line 250, add "printf("AnnihilationCrossSectionSwave (internal units) = %g\n", All.sigmav_s);"
"begrun.c": line 241, add "#endif"
"begrun.c": line 243, add "#ifdef SCATTERING_DM"
"begrun.c": line 244, add "printf("ScatteringCrossSection (internal units) = %g\n", All.sigma_scatter);"
"begrun.c": line 245, add "#endif"
"begrun.c": line 247, add "printf("\n");"
"begrun.c": line 248, add "#endif // end ADM_MODEL_ON"
"begrun.c": line 273, move "if(RestartFlag == 0)"
"begrun.c": line 274, move "strcpy(mode, "w");"
"begrun.c": line 275, move "else"
"begrun.c": line 276, move "strcpy(mode, "a");"
"begrun.c": line 280, add "#ifdef ADM_MODEL_ON"
"begrun.c": line 281, add "#if !defined(TEST_HERNQUIST_HALO_SCATT) && (!defined(TEST_HERNQUIST_HALO_ANN))"
"begrun.c": line 282, add "if(ThisTask == 0)" 
"begrun.c": line 283, add ""{"
"begrun.c": line 284, add "endif"
"begrun.c": line 285, add "sprintf(buf, "%sadm_log_%.4d.txt", All.OutputDir, ThisTask);"
"begrun.c": line 286, add "if(!(FdAdmModel = fopen(buf, mode)))"
"begrun.c": line 287, add "{"
"begrun.c": line 288, add "printf("error in opening file '%s' on core %d\n", buf, ThisTask);"
"begrun.c": line 289, add "endrun(1);"
"begrun.c": line 290, add "}"
"begrun.c": line 291, add "#if !defined(TEST_HERNQUIST_HALO_SCATT) && (!defined(TEST_HERNQUIST_HALO_ANN))"
"begrun.c": line 292, add "}"
"begrun.c": line 293, add "#endif"
"begrun.c": line 294, add "#endif"
"begrun.c": line 349, add "#ifdef ADM_MODEL_ON"
"begrun.c": line 350, add "fclose(FdAdmModel);"
"begrun.c": line 351, add "#endif"
"begrun.c": line 420, add "#ifdef ADM_MODEL_ON"
"begrun.c": line 422, add "#if defined(VECTOR_MEDIATOR) && defined(SCALAR_MEDIATOR)"
"begrun.c": line 423, add "if(ThisTask == 0)"
"begrun.c": line 424, add "{"
"begrun.c": line 425, add "fprintf(stdout, "Code was compiled with VECTOR_MEDIATOR and with SCALAR_MEDIATOR.\n");"
"begrun.c": line 426, add "fprintf(stdout, "This is not allowed.\n");"
"begrun.c": line 427, add "}"
"begrun.c": line 428, add "endrun(0);"
"begrun.c": line 429, add "#endif"
"begrun.c": line 431, add "#if defined(TRANSFER_CROSS_SECTION) && !defined(SCATTERING_DM)"
"begrun.c": line 432, add "if(ThisTask == 0)"
"begrun.c": line 433, add "{"
"begrun.c": line 434, add "fprintf(stdout, "Code was compiled with TRANSFER_CROSS_SECTION, but not with SCATTERING_DM.\n");"
"begrun.c": line 435, add "fprintf(stdout, "This is not allowed.\n");"
"begrun.c": line 436, add "}"
"begrun.c": line 437, add "endrun(0);"
"begrun.c": line 438, add "#endif"
"begrun.c": line 440, add "#if defined(MODIFIED_TRANSFER_CROSS_SECTION) && !defined(SCATTERING_DM)"
"begrun.c": line 441, add "if(ThisTask == 0)"
"begrun.c": line 442, add "{"
"begrun.c": line 443, add "fprintf(stdout, "Code was compiled with MODIFIED_TRANSFER_CROSS_SECTION, but not with SCATTERING_DM.\n");"
"begrun.c": line 444, add "fprintf(stdout, "This is not allowed.\n");"
"begrun.c": line 445, add "}"
"begrun.c": line 446, add "endrun(0);"
"begrun.c": line 447, add "#endif"
"begrun.c": line 449, add "#if defined(VELOCITY_ANGULAR_DEPENDENT_CROSS_SECTION) && !defined(SCATTERING_DM)"
"begrun.c": line 450, add "if(ThisTask == 0)"
"begrun.c": line 451, add "{"
"begrun.c": line 452, add "fprintf(stdout, "Code was compiled with VELOCITY_ANGULAR_DEPENDENT_CROSS_SECTION, but not with SCATTERING_DM.\n");"
"begrun.c": line 453, add "fprintf(stdout, "This is not allowed.\n");"
"begrun.c": line 454, add "}"
"begrun.c": line 455, add "endrun(0);"
"begrun.c": line 456, add "#endif"
"begrun.c": line 458, add "#if defined(OUTPUTDT_SCATTER) && !defined(SCATTERING_DM)"
"begrun.c": line 459, add "if(ThisTask == 0)"
"begrun.c": line 460, add "{"
"begrun.c": line 461, add "fprintf(stdout, "Code was compiled with OUTPUTDT_SCATTER, but not with SCATTERING_DM.\n");"
"begrun.c": line 462, add "fprintf(stdout, "This is not allowed.\n");"
"begrun.c": line 463, add "}"
"begrun.c": line 464, add "endrun(0);"
"begrun.c": line 465, add "#endif"
"begrun.c": line 467, add "#else // if ADM_MODEL_ON is not defined"
"begrun.c": line 469, add "#ifdef VECTOR_MEDIATOR"
"begrun.c": line 470, add "if(ThisTask == 0)"
"begrun.c": line 471, add "{"
"begrun.c": line 472, add "fprintf(stdout, "Code was compiled with VECTOR_MEDIATOR, but not with ADM_MODEL_ON.\n");"
"begrun.c": line 473, add "fprintf(stdout, "This is not allowed.\n");"
"begrun.c": line 474, add "}"
"begrun.c": line 475, add "endrun(0);"
"begrun.c": line 476, add "#endif // end VECTOR_MEDIATOR"
"begrun.c": line 478, add "#ifdef SCALAR_MEDIATOR"
"begrun.c": line 479, add "if(ThisTask == 0)"
"begrun.c": line 480, add "{"
"begrun.c": line 481, add "fprintf(stdout, "Code was compiled with SCALAR_MEDIATOR, but not with ADM_MODEL_ON.\n");"
"begrun.c": line 482, add "fprintf(stdout, "This is not allowed.\n");"
"begrun.c": line 483, add "}"
"begrun.c": line 484, add "endrun(0);"
"begrun.c": line 485, add "#endif // end SCALAR_MEDIATOR"
"begrun.c": line 487, add "#ifdef OSCILLATION_DM"
"begrun.c": line 488, add "if(ThisTask == 0)"
"begrun.c": line 489, add "{"
"begrun.c": line 490, add "fprintf(stdout, "Code was compiled with OSCILLATION_DM, but not with ADM_MODEL_ON.\n");"
"begrun.c": line 491, add "fprintf(stdout, "This is not allowed.\n");"
"begrun.c": line 492, add "}"
"begrun.c": line 493, add "endrun(0);"
"begrun.c": line 494, add "#endif // end OSCILLATION_DM"
"begrun.c": line 496, add "#ifdef ANNIHILATION_DM"
"begrun.c": line 497, add "if(ThisTask == 0)"
"begrun.c": line 498, add "{"
"begrun.c": line 499, add "fprintf(stdout, "Code was compiled with ANNIHILATION_DM, but not with ADM_MODEL_ON.\n");"
"begrun.c": line 500, add "fprintf(stdout, "This is not allowed.\n");"
"begrun.c": line 501, add "}"
"begrun.c": line 502, add "endrun(0);"
"begrun.c": line 503, add "#endif // end ANNIHILATION_DM"
"begrun.c": line 505, add "#ifdef SCATTERING_DM"
"begrun.c": line 506, add "if(ThisTask == 0)"
"begrun.c": line 507, add "{"
"begrun.c": line 508, add "fprintf(stdout, "Code was compiled with SCATTERING_DM, but not with ADM_MODEL_ON.\n");"
"begrun.c": line 509, add "fprintf(stdout, "This is not allowed.\n");"
"begrun.c": line 510, add "}"
"begrun.c": line 511, add "endrun(0);"
"begrun.c": line 512, add "#endif // end SCATTERING_DM"
"begrun.c": line 514, add "#ifdef TRANSFER_CROSS_SECTION"
"begrun.c": line 515, add "if(ThisTask == 0)"
"begrun.c": line 516, add "{"
"begrun.c": line 517, add "fprintf(stdout, "Code was compiled with TRANSFER_CROSS_SECTION, but not with ADM_MODEL_ON.\n");"
"begrun.c": line 518, add "fprintf(stdout, "This is not allowed.\n");"
"begrun.c": line 519, add "}"
"begrun.c": line 520, add "endrun(0);"
"begrun.c": line 521, add "#endif // end TRANSFER_CROSS_SECTION"
"begrun.c": line 523, add "#ifdef MODIFIED_TRANSFER_CROSS_SECTION"
"begrun.c": line 524, add "if(ThisTask == 0)"
"begrun.c": line 525, add "{"
"begrun.c": line 526, add "fprintf(stdout, "Code was compiled with MODIFIED_TRANSFER_CROSS_SECTION, but not with ADM_MODEL_ON.\n");"
"begrun.c": line 527, add "fprintf(stdout, "This is not allowed.\n");"
"begrun.c": line 528, add "}"
"begrun.c": line 529, add "endrun(0);"
"begrun.c": line 530, add "#endif // end MODIFIED_TRANSFER_CROSS_SECTION"
"begrun.c": line 532, add "#ifdef VELOCITY_ANGULAR_DEPENDENT_CROSS_SECTION"
"begrun.c": line 533, add "if(ThisTask == 0)"
"begrun.c": line 534, add "{"
"begrun.c": line 535, add "fprintf(stdout, "Code was compiled with VELOCITY_ANGULAR_DEPENDENT_CROSS_SECTION, but not with ADM_MODEL_ON.\n");"
"begrun.c": line 536, add "fprintf(stdout, "This is not allowed.\n");"
"begrun.c": line 537, add "}"
"begrun.c": line 538, add "endrun(0);"
"begrun.c": line 539, add "#endif // end VELOCITY_ANGULAR_DEPENDENT_CROSS_SECTION"
"begrun.c": line 541, add "#ifdef OUTPUTDT_SCATTER"
"begrun.c": line 542, add "if(ThisTask == 0)"
"begrun.c": line 543, add "{"
"begrun.c": line 544, add "fprintf(stdout, "Code was compiled with OUTPUTDT_SCATTER, but not with ADM_MODEL_ON.\n");"
"begrun.c": line 545, add "fprintf(stdout, "This is not allowed.\n");"
"begrun.c": line 546, add "}"
"begrun.c": line 547, add "endrun(0);"
"begrun.c": line 548, add "#endif // end OUTPUTDT_SCATTER"
"begrun.c": line 550, add "#endif // end ADM_MODEL_ON"
"begrun.c": line 819, add "#if defined(VECTOR_MEDIATOR) || defined(SCALAR_MEDIATOR)"
"begrun.c": line 820, add "strcpy(tag[nt], "MediatorDMmassratio");"
"begrun.c": line 821, add "addr[nt] = &All.MediatorDMmassratio;"
"begrun.c": line 822, add "id[nt++] = DOUBLE;"
"begrun.c": line 824, add "strcpy(tag[nt], "VectorOrScalarCoupling");"
"begrun.c": line 825, add "addr[nt] = &All.VectorOrScalarCoupling;"
"begrun.c": line 826, add "id[nt++] = DOUBLE;"
"begrun.c": line 827, add "#endif"
"begrun.c": line 829, add "#ifdef OSCILLATION_DM"
"begrun.c": line 830, add "strcpy(tag[nt], "MajoranaMass");"
"begrun.c": line 831, add "addr[nt] = &All.MajoranaMass;"
"begrun.c": line 832, add "id[nt++] = DOUBLE;"
"begrun.c": line 833, add "#endif"
"begrun.c": line 835, add "#ifdef ANNIHILATION_DM"
"begrun.c": line 836, add "strcpy(tag[nt], "AnnihilationCrossSectionSwave");"
"begrun.c": line 837, add "addr[nt] = &All.AnnihilationCrossSectionSwave;"
"begrun.c": line 838, add "id[nt++] = DOUBLE;"
"begrun.c": line 840, add "strcpy(tag[nt], "AnnihilateSearchRadius");"
"begrun.c": line 841, add "addr[nt] = &All.AnnihilateSearchRadius;"
"begrun.c": line 842, add "id[nt++] = DOUBLE;"
"begrun.c": line 844, add "strcpy(tag[nt], "AnnihilateSearchRadiusMaxPhys");"
"begrun.c": line 845, add "addr[nt] = &All.AnnihilateSearchRadiusMaxPhys;"
"begrun.c": line 846, add "id[nt++] = DOUBLE;"
"begrun.c": line 847, add "#endif"
"begrun.c": line 849, add "#ifdef SCATTERING_DM"
"begrun.c": line 850, add "strcpy(tag[nt], "ScatteringCrossSection");"
"begrun.c": line 851, add "addr[nt] = &All.ScatteringCrossSection;"
"begrun.c": line 852, add "id[nt++] = DOUBLE;"
"begrun.c": line 854, add "strcpy(tag[nt], "ScatterSearchRadius");"
"begrun.c": line 855, add "addr[nt] = &All.ScatterSearchRadius;"
"begrun.c": line 856, add "id[nt++] = DOUBLE;"
"begrun.c": line 858, add "strcpy(tag[nt], "ScatterSearchRadiusMaxPhys");"
"begrun.c": line 859, add "addr[nt] = &All.ScatterSearchRadiusMaxPhys;"
"begrun.c": line 860, add "id[nt++] = DOUBLE;"
"begrun.c": line 861, add "strcpy(tag[nt], "ProbabilityTol");"
"begrun.c": line 863, add "addr[nt] = &All.ProbabilityTol;"
"begrun.c": line 864, add "id[nt++] = DOUBLE;"
"begrun.c": line 865, add "#endif"
"begrun.c": line 867, add "#ifdef VELOCITY_ANGULAR_DEPENDENT_CROSS_SECTION"
"begrun.c": line 868, add "strcpy(tag[nt], "ThetaTableFilename");"
"begrun.c": line 869, add "addr[nt] = All.ThetaTableFilename;"
"begrun.c": line 870, add "id[nt++] = STRING;"
"begrun.c": line 872, add "strcpy(tag[nt], "CrossSectionTableFilename");"
"begrun.c": line 873, add "addr[nt] = All.CrossSectionTableFilename;"
"begrun.c": line 874, add "id[nt++] = STRING;"
"begrun.c": line 876, add "strcpy(tag[nt], "Nv");"
"begrun.c": line 877, add "addr[nt] = &All.Nv;"
"begrun.c": line 878, add "id[nt++] = INT;"
"begrun.c": line 880, add "strcpy(tag[nt], "Ntheta");"
"begrun.c": line 881, add "addr[nt] = &All.Ntheta;"
"begrun.c": line 882, add "id[nt++] = INT;"
"begrun.c": line 884, add "strcpy(tag[nt], "vmin");"
"begrun.c": line 885, add "addr[nt] = &All.vmin;"
"begrun.c": line 886, add "id[nt++] = DOUBLE;"
"begrun.c": line 888, add "strcpy(tag[nt], "vmax");"
"begrun.c": line 889, add "addr[nt] = &All.vmax;"
"begrun.c": line 890, add "id[nt++] = DOUBLE;"
"begrun.c": line 891, add "#endif"
"begrun.c": line 984, add "#if defined(ADM_MODEL_ON) && defined(VELOCITY_ANGULAR_DEPENDENT_CROSS_SECTION)"
"begrun.c": line 985, add "errorFlag += read_thetatable(All.ThetaTableFilename);"
"begrun.c": line 986, add "errorFlag += read_crosssectiontable(All.CrossSectionTableFilename);"
"begrun.c": line 987, add "#endif"

"init.c": line 26, add "All.PreviousTime = 0;"
"init.c": line 88, move "#ifdef PMGRID"
"init.c": line 89, move "All.PM_Ti_endstep = All.PM_Ti_begstep = 0;"
"init.c": line 90, move "#endif"
"init.c": line 92, move "#ifdef FLEXSTEPS"
"init.c": line 93, move "All.PresentMinStep = TIMEBASE;"
"init.c": line 94, move "#endif"
"init.c": line 98, add "// I define them here and not in read_ic.c as other variables because the following ones are not read from snapshots or restart files (it should not matter though)"
"init.c": line 99, add "#ifdef ANNIHILATION_DM"
"init.c": line 100, add "All.N_annihilations = 0;"
"init.c": line 101, add "All.N_annihilations_in_timestep = 0;"
"init.c": line 102, add "All.N_annihilations_tot = 0;"
"init.c": line 103, add "#endif"
"init.c": line 105, add "#ifdef SCATTERING_DM"
"init.c": line 106, add "All.N_scatterings = 0;"
"init.c": line 107, add "All.N_scatterings_in_timestep = 0;"
"init.c": line 108, add "All.N_scatterings_tot = 0;"
"init.c": line 109, add "#endif"
"init.c": line 129, move "#ifdef FLEXSTEPS"
"init.c": line 130, move "P[i].FlexStepGrp = (int) (TIMEBASE * get_random_number(P[i].ID));"
"init.c": line 131, move "#endif"
"init.c": line 135, add "#ifdef ANNIHILATION_DM"
"init.c": line 136, add "P[i].AnnihilateFlag = 0;" 
"init.c": line 137, add "#endif"
"init.c": line 138, add "#ifdef SCATTERING_DM"
"init.c": line 139, add "P[i].ScatterFlag = 0;"
"init.c": line 140, add "#endif"
"init.c": line 331, add "#ifdef ADM_MODEL_ON"
"init.c": line 332, add "for(i = 0; i < NumPart; i++)"
"init.c": line 333, add "{"
"init.c": line 334, add "if(P[i].Type == ADM_type)"
"init.c": line 335, add "{"
"init.c": line 336, add "#ifdef OSCILLATION_DM"
"init.c": line 337, add "P[i].OscillationAngle = 0;"
"init.c": line 338, add "#endif"
"init.c": line 339, add "#ifdef SCATTERING_DM"
"init.c": line 340, add "P[i].dt_scatter = 0;"
"init.c": line 341, add "#endif"
"init.c": line 342, add "}"
"init.c": line 343, add "}"
"init.c": line 344, add "#endif // end ADM_MODEL_ON"

"io.c": line 44, remove "#if defined(SFR) || defined(BLACK_HOLES)"
"io.c": line 45, remove "rearrange_particle_sequence();"
"io.c": line 46, remove "/* ensures that new tree will be constructed */"
"io.c": line 47, remove "All.NumForcesSinceLastDomainDecomp = 1 + All.TreeDomainUpdateFrequency * All.TotNumPart;"
"io.c": line 48, remove "#endif"
"io.c": line 351, add "#ifdef ADM_MODEL_ON"
"io.c": line 353, add "case IO_ANGOSC:   /* initial oscillation angle */"
"io.c": line 354, add "#ifdef OSCILLATION_DM"
"io.c": line 355, add "for(n = 0; n < pc; pindex++)"
"io.c": line 356, add "if(P[pindex].Type == type)"
"io.c": line 357, add "{"
"io.c": line 358, add "*fp++ = P[pindex].OscillationAngle;"
"io.c": line 359, add "n++;"
"io.c": line 360, add "}"
"io.c": line 361, add "#endif"
"io.c": line 362, add "break;"
"io.c": line 364, add "case IO_DTSCAT:   /* dt_scatter */"
"io.c": line 365, add "#if defined(SCATTERING_DM) && defined(OUTPUTDT_SCATTER)"
"io.c": line 366, add "for(n = 0; n < pc; pindex++)"
"io.c": line 367, add "if(P[pindex].Type == type)"
"io.c": line 368, add "{"
"io.c": line 369, add "*fp++ = P[pindex].dt_scatter;"
"io.c": line 370, add "n++;"
"io.c": line 371, add "}"
"io.c": line 372, add "#endif"
"io.c": line 373, add "break;"
"io.c": line 375, add "#endif // end ADM_MODEL_ON"  
"io.c": line 420, add "#ifdef ADM_MODEL_ON"
"io.c": line 421, add "case IO_ANGOSC:   /* oscillation angle */"
"io.c": line 422, add "case IO_DTSCAT:   /* dt_scatter */"
"io.c": line 423, add "#endif"
"io.c": line 488, add "#ifdef ADM_MODEL_ON"
"io.c": line 489, add "case IO_ANGOSC:   /* oscillation angle */"
"io.c": line 490, add "case IO_DTSCAT:   /* dt_scatter */" 
"io.c": line 491, add "#endif"
"io.c": line 564, add "#ifdef ADM_MODEL_ON"
"io.c": line 565, add "case IO_ANGOSC:   /* oscillation angle */"
"io.c": line 566, add "case IO_DTSCAT:   /* dt_scatter */"
"io.c": line 567, add "for(i = 0; i < 6; i++)"
"io.c": line 568, add "if(i != ADM_type)"
"io.c": line 569, add "typelist[i] = 0;"
"io.c": line 570, add "return header.npart[ADM_type];"
"io.c": line 571, add "break;"
"io.c": line 572, add "#endif"
"io.c": line 613, add "#ifdef ADM_MODEL_ON"
"io.c": line 615, add "#ifndef OSCILLATION_DM"
"io.c": line 616, add "if(blocknr == IO_ANGOSC)"
"io.c": line 617, add "return 0;"
"io.c": line 618, add "#endif"
"io.c": line 620, add "#ifndef OUTPUTDT_SCATTER"
"io.c": line 621, add "if(blocknr == IO_DTSCAT)"
"io.c": line 622, add "return 0;"
"io.c": line 623, add "#endif"
"io.c": line 625, add "#endif // end ADM_MODEL_ON"
"io.c": line 682, add "#ifdef ADM_MODEL_ON"
"io.c": line 683, add "case IO_ANGOSC:"
"io.c": line 684, add "strncpy(Tab_IO_Labels[IO_ANGOSC], "ANGO", 4);"
"io.c": line 685, add "break;"
"io.c": line 686, add "case IO_DTSCAT;"
"io.c": line 687, add "strncpy(Tab_IO_Labels[IO_DTSCAT], "DTSC", 4);"
"io.c": line 688, add "break;"
"io.c": line 689, add "#endif"
"io.c": line 742, add "#ifdef ADM_MODEL_ON"
"io.c": line 743, add "case IO_ANGOSC:"
"io.c": line 744, add "strcpy(buf, "OscillationAngle");"
"io.c": line 745, add "break;"
"io.c": line 746, add "case IO_DTSCAT;"
"io.c": line 747, add "strcpy(buf, "ScatteringTimestep");"
"io.c": line 748, add "break;"
"io.c": line 749, add "#endif"

"read_ic.c": line 146, add "// MPUEL: This is done only initially, namely when RestartFlag == 0. Otherwise, the following parameters are read from the restart or snapshot files"
"read_ic.c": line 147, add "#ifdef ADM_MODEL_ON"
"read_ic.c": line 148, add "for(i = 0; i < NumPart; i++)"
"read_ic.c": line 149, add "{"
"read_ic.c": line 150, add "if(P[i].Type == ADM_type)"
"read_ic.c": line 151, add "{"
"read_ic.c": line 152, add "#ifdef OSCILLATION_DM"
"read_ic.c": line 153, add "P[i].OscillationAngle = 0;"
"read_ic.c": line 154, add "#endif"
"read_ic.c": line 155, add "#ifdef SCATTERING_DM"
"read_ic.c": line 156, add "P[i].dt_scatter = 0;"
"read_ic.c": line 157, add "#endif"
"read_ic.c": line 158, add "}"
"read_ic.c": line 159, add "}"
"read_ic.c": line 160, add "#endif // end ADM_MODEL_ON"
"read_ic.c": line 259, add "#ifdef ADM_MODEL_ON"
"read_ic.c": line 261, add "case IO_ANGOSC:		/* oscillation angle */"
"read_ic.c": line 262, add "#ifdef OSCILLATION_DM"
"read_ic.c": line 263, add "for(n = 0; n < pc; n++)"
"read_ic.c": line 264, add "P[offset + n].OscillationAngle = *fp++;"
"read_ic.c": line 265, add "#endif"
"read_ic.c": line 266, add "break;"
"read_ic.c": line 268, add "case IO_DTSCAT:		/* dt_scatter */"
"read_ic.c": line 269, add "#if defined(SCATTERING_DM) && defined(OUTPUTDT_SCATTER)"
"read_ic.c": line 270, add "for(n = 0; n < pc; n++)"
"read_ic.c": line 271, add "P[offset + n].dt_scatter = *fp++;"
"read_ic.c": line 272, add "#endif"
"read_ic.c": line 273, add "break;"
"read_ic.c": line 275, add "#endif // end ADM_MODEL_ON"

"restart.c": line 166, add "#ifdef ADM_MODEL_ON"
"restart.c": line 167, add "byten(gsl_rng_state(random_generator_ADM), gsl_rng_size(random_generator_ADM), modus);"
"restart.c": line 168, add "#endif"

"driftfac.c": line 35, add "#ifdef ADM_MODEL_ON"
"driftfac.c": line 36, add "double initial = 0;"
"driftfac.c": line 37, add "#endif"
"driftfac.c": line 68, add "#ifdef ADM_MODEL_ON"
"driftfac.c": line 69, add "F.function = &cosmictime_integ;
"driftfac.c": line 70, add "gsl_integration_qag(&F, 0, All.TimeBegin, 0,
"driftfac.c": line 71, add "1.0e-10, WORKSIZE, GSL_INTEG_GAUSS41, workspace, &result, &abserr);
"driftfac.c": line 72, add "initial = result;"
"driftfac.c": line 74, add "if(ThisTask == 0)"
"driftfac.c": line 75, add "printf("t (a = 0 till a = a_in) = %f\n", initial);
"driftfac.c": line 78, add "for(i = 0; i < COSMIC_TIME_TABLE_LENGTH; i++)"
"driftfac.c": line 79, add "{"
"driftfac.c": line 80, add "F.function = &cosmictime_integ;"
"driftfac.c": line 81, add "gsl_integration_qag(&F, All.TimeBegin, All.TimeBegin + (All.TimeMax - All.TimeBegin) / COSMIC_TIME_TABLE_LENGTH * (i + 1), 0,"
"driftfac.c": line 82, add "1.0e-10, WORKSIZE, GSL_INTEG_GAUSS41, workspace, &result, &abserr);"
"driftfac.c": line 83, add "CosmicTimeTable[i] = initial + result;"
"driftfac.c": line 84, add "}"
"driftfac.c": line 86, add "if(ThisTask == 0)"
"driftfac.c": line 87, add "printf("t (a = 1) = %f\n", CosmicTimeTable[COSMIC_TIME_TABLE_LENGTH-1]);"
"driftfac.c": line 88, add "#endif"
"driftfac.c": line 257, add "// MPUEL: for cosmictime_integ(), see adm_model.c"

"proto.h": line 200, add "#ifdef ADM_MODEL_ON"
"proto.h": line 202, add "double get_cosmic_time(double a0);"
"proto.h": line 203, add "double cosmictime_integ(double a, void *param);"
"proto.h": line 205, add "#if defined(ANNIHILATION_DM) || defined(SCATTERING_DM)"
"proto.h": line 206, add "void 	annihilate_scatter(void);"
"proto.h": line 207, add "void 	do_annihilation_scattering(int target, int mode);"
"proto.h": line 209, add "FLOAT 	*isotropic_velocities(FLOAT p1vel[3], FLOAT p2vel[3], double w0);"
"proto.h": line 211, add "int 	ngb_treefind_variable_ADM(FLOAT searchcenter[3], FLOAT hsml, int *startnode);"
"proto.h": line 212, add "int    	adm_compare_key(const void *a, const void *b);"
"proto.h": line 214, add "#ifdef ANNIHILATION_DM"
"proto.h": line 215, add "void	remove_annihilated_particles(void);"
"proto.h": line 216, add "#endif"
"proto.h": line 218, add "#ifdef SCATTERING_DM"
"proto.h": line 219, add "void	update_timesteps_after_scattering(void);"
"proto.h": line 220, add "#endif"
"proto.h": line 222, add "#ifdef VELOCITY_ANGULAR_DEPENDENT_CROSS_SECTION"
"proto.h": line 223, add "int read_thetatable(char *fname);"
"proto.h": line 224, add "int read_crosssectiontable(char *fname);"
"proto.h": line 226, add "FLOAT 	*anisotropic_velocities(FLOAT p1vel[3], FLOAT p2vel[3], double w0, double dvx0, double dvy0, double dvz0, int vi0);"
"proto.h": line 227, add "#endif"
"proto.h": line 228, add "#endif // end ANNIHILATION_DM || SCATTERING_DM"
"proto.h": line 230, add "#endif // end ADM_MODEL_ON"

"tags.h": line 35, add "#define TAG_ADM_A		  38"
"tags.h": line 36, add "#define TAG_ADM_B		  39"

"run.c": line 47, add "if(All.Ti_nextoutput > TIMEBASE) return;"
"run.c": line 76, add "#ifdef ADM_MODEL_ON"
"run.c": line 78, add "#ifdef ANNIHILATION_DM"
"run.c": line 79, add "All.N_annihilations = 0; // in principle not needed (for safety)"
"run.c": line 80, add "All.N_annihilations_in_timestep = 0; // initialize the total number of annihilations at the intial of each timestep"
"run.c": line 81, add "#endif"
"run.c": line 82, add "#ifdef SCATTERING_DM"
"run.c": line 83, add "All.N_scatterings = 0; // in principle not needed (for safety)"
"run.c": line 84, add "All.N_scatterings_in_timestep = 0; // initialize the total number of scatterings at the initial of each timestep"
"run.c": line 85, add "#endif"
"run.c": line 87, add "#if defined(ANNIHILATION_DM) || defined(SCATTERING_DM)"
"run.c": line 88, add "annihilate_scatter();"
"run.c": line 91, add "#endif"
"run.c": line 92, add "#endif // end ADM_MODEL_ON"
"run.c": line 269, add "All.PreviousTime = timeold;"
"run.c": line 420, add "#ifdef ADM_MODEL_ON"
"run.c": line 421, add "#if !defined(TEST_HERNQUIST_HALO_SCATT) && (!defined(TEST_HERNQUIST_HALO_ANN))"
"run.c": line 422, add "fprintf(FdAdmModel, "\nBegin Step %d, Time: %g, Redshift: %g, PreviousTime: %g\n", All.NumCurrentTiStep, All.Time, z, All.PreviousTime);"
"run.c": line 423, add "#endif"
"run.c": line 425, add "#ifdef ANNIHILATION_DM"
"run.c": line 426, add "#if !defined(TEST_HERNQUIST_HALO_SCATT) && (!defined(TEST_HERNQUIST_HALO_ANN))"
"run.c": line 427, add "fprintf(FdAdmModel, "--> Annihilations: %lu, total: %lu\n", All.N_annihilations_in_timestep, All.N_annihilations_tot);"
"run.c": line 428, add "#endif"
"run.c": line 429, add "printf("--> Annihilations: %lu, total: %lu\n", All.N_annihilations_in_timestep, All.N_annihilations_tot);"
"run.c": line 430, add "#endif // end ANNIHILATION_DM" 
"run.c": line 432, add "#ifdef SCATTERING_DM"
"run.c": line 433, add "#if !defined(TEST_HERNQUIST_HALO_SCATT) && (!defined(TEST_HERNQUIST_HALO_ANN))"
"run.c": line 434, add "fprintf(FdAdmModel, "--> SScatterings: %lu, total: %lu\n", All.N_scatterings_in_timestep, All.N_scatterings_tot);"
"run.c": line 435, add "#endif"
"run.c": line 436, add "printf("--> Scatterings: %lu, total: %lu\n", All.N_scatterings_in_timestep, All.N_scatterings_tot);"
"run.c": line 437, add "#endif // end SCATTERING_DM"
"run.c": line 439, add "#if !defined(TEST_HERNQUIST_HALO_SCATT) && (!defined(TEST_HERNQUIST_HALO_ANN))"
"run.c": line 440, add "fprintf(FdAdmModel, "NumPart: %d, TotNumPart: %lld\n", NumPart, All.TotNumPart);"
"run.c": line 441, add "fflush(FdAdmModel);"
"run.c": line 442, add "#endif"
"run.c": line 443, add "#endif // end ADM_MODEL_ON"
"run.c": line 452, add "#ifdef ADM_MODEL_ON"
"run.c": line 453, add "#if !defined(TEST_HERNQUIST_HALO_SCATT) && (!defined(TEST_HERNQUIST_HALO_ANN))"
"run.c": line 454, add "fprintf(FdAdmModel, "\nBegin Step %d, Time: %g, PreviousTime: %g\n", All.NumCurrentTiStep, All.Time, All.PreviousTime);"
"run.c": line 455, add "#endif"
"run.c": line 457, add "#ifdef ANNIHILATION_DM"
"run.c": line 458, add "#if !defined(TEST_HERNQUIST_HALO_SCATT) && (!defined(TEST_HERNQUIST_HALO_ANN))"
"run.c": line 459, add "fprintf(FdAdmModel, "--> Annihilations: %lu, total: %lu\n", All.N_annihilations_in_timestep, All.N_annihilations_tot);"
"run.c": line 460, add "#endif"
"run.c": line 461, add "printf("--> Annihilations: %lu, total: %lu\n", All.N_annihilations_in_timestep, All.N_annihilations_tot);"
"run.c": line 462, add "#endif // end ANNIHILATION_DM" 
"run.c": line 464, add "#ifdef SCATTERING_DM"
"run.c": line 465, add "#if !defined(TEST_HERNQUIST_HALO_SCATT) && (!defined(TEST_HERNQUIST_HALO_ANN))"
"run.c": line 466, add "fprintf(FdAdmModel, "--> Scatterings: %lu, total: %lu\n", All.N_scatterings_in_timestep, All.N_scatterings_tot);"
"run.c": line 467, add "#endif"
"run.c": line 468, add "printf("--> Scatterings: %lu, total: %lu\n", All.N_scatterings_in_timestep, All.N_scatterings_tot);"
"run.c": line 469, add "#endif // end SCATTERING_DM"
"run.c": line 471, add "#if !defined(TEST_HERNQUIST_HALO_SCATT) && (!defined(TEST_HERNQUIST_HALO_ANN))"
"run.c": line 472, add "fprintf(FdAdmModel, "NumPart: %d, TotNumPart: %lld\n", NumPart, All.TotNumPart);"
"run.c": line 473, add "fflush(FdAdmModel);"
"run.c": line 474, add "#endif"
"run.c": line 475, add "#endif // end ADM_MODEL_ON"

Write "adm_model.c" from scratch, inspired by Robertson's work and Rocha's implementation (https://bitbucket.org/migroch/gadget-sidm/)





IMPLEMENTED VARIABLES:
(*) double OscillationAngle; // oscillation angle for each DM particle
double MediatorDMmassratio; // w or omega = m_V / m_DM
double VectorOrScalarCoupling;  // alpha_D
double MajoranaMass; // delta_m in eV, to be read from the parameter file 
					   (transform it in the appropriate code units -> found in begrun.c)
double AnnihilationCrossSectionSwave; // to be read from the parameter file
double AnnihilateSearchRadius; // h_A, to be read from the parameter file
double AnnihilateSearchRadiusMaxPhys; // h_A max, to be read from the 
										 parameter file
double ScatteringCrossSection; // in cm^2/g, to be read from the parameter file
								 (see whether to be substituted by DifferentialScatteringCrossSection if we implement sigma_V or sigma_T)
double ScatterSearchRadius; // h_S, to be read from the parameter file
double ScatterSearchRadiusMaxPhys; // h_S max, to be read from the parameter file
double ProbabilityTol; // timestep delimiter as done in KODA
(*) double dt_scatter; // timestep for single particle (see KODA's code dt_sidm);


MAKEFILE NEW OPTIONS:
OPT   +=  -DADM_MODEL_ON
OPT   +=  -DVECTOR_MEDIATOR
OPT   +=  -DSCALAR_MEDIATOR
OPT   +=  -DOSCILLATION_DM
OPT   +=  -DANNIHILATION_DM
OPT   +=  -DSCATTERING_DM
OPT   +=  -DTRANSFER_CROSS_SECTION # it is the one that tends to the expected sigma_s
OPT   +=  -DMODIFIED_TRANSFER_CROSS_SECTION
OPT   +=  -DVELOCITY_ANGULAR_DEPENDENT_CROSS_SECTION
OPT   +=  -DLATE_TIME_PHASE_CHANGE  # only for vector mediator only (not used!) 
OPT   +=  -DOUTPUTDT_SCATTER
OPT   +=  -DTEST_UNIFORM_BKG # test 1
